pipeline {
	agent any
	parameters {
		booleanParam(name: 'RC', defaultValue: false, description: 'Is this a Release Candidate?')
	}
	environment {
		VERSION: '0.1.0'
		VERSION_RC = 'rc.2'
	}
	stages {
		stage('Audit tools') {
			steps {
				sh '''
				  git version
				  docker version
				  dotnet --list-sdks
				  dotnet --list-runtimes
				'''
			}
		}
		stage('Build') {
			environment {
				// compute a env variable to be used throughout the Build stage
				VERSION_SUFFIX = "${sh(script: 'if [ "{RC}" == "false" ]; then echo -n "${VERSION_RC}+ci.${BUILD_NUMBER}"; else echo -n "${VERSION_RC}"; fi', returnStdout: true)}"
			}
			steps {
				echo "Building version: ${VERSION} with suffix: ${VERSION_RC}"
				sh 'dotnet build -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_RC}" ./m3/src/Pi.Web.csproj'
			}
		}
		stage('Unit Test') {
			steps {
				dir('./m3/src') {
					sh '''
					  dotnet test --logger "trx;LogFileName=Pi.Math.trx" Pi.Math.Tests/Pi.Math.Tests.csproj
					  dotnet test --logger "trx;LogFileName=Pi.Runtime.trx" Pi.Runtime.Tests/Pi.Runtime.Tests.csproj
					'''
					mstest testResultsFile: "**/*.trx", keepLongStdio: true
				}
			}
		}
		stage('Smoke Test') {
			steps {
				sh 'dotnet ./m3/src/Pi.Web/bin/Debug/netcoreapp3.1/Pi.Web/dll'
			}
		}
		stage('Publish') {
			// only run the 'Publish' stage when the expression (params.RC) is true 
			when {
				expression { return params.RC }
			}
			steps {
				sh 'dotnet public -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_RC}" ./m3/src/Pi.Web/Pi.Web.csproj'
				archiveArtifacts('out/')
			}
		}
	}
}
